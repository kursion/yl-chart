{
  "name": "anymatch",
  "version": "0.1.1",
  "description": "Matches strings against configurable strings, globs, regular expressions, and/or functions",
  "author": {
    "name": "Elan Shanker",
    "url": "http://github.com/es128"
  },
  "homepage": "https://github.com/es128/anymatch",
  "repository": {
    "type": "git",
    "url": "git@github.com:es128/anymatch.git"
  },
  "bugs": {
    "url": "https://github.com/es128/anymatch/issues"
  },
  "main": "lib",
  "keywords": [
    "match",
    "any",
    "string",
    "file",
    "fs",
    "list",
    "glob",
    "regex",
    "regexp",
    "regular",
    "expression",
    "function"
  ],
  "dependencies": {
    "minimatch": "~0.2.12"
  },
  "scripts": {
    "prepublish": "rm -rf lib && coffee --bare --output lib/ src/"
  },
  "license": "MIT",
  "readme": "anymatch\n======\nJavascript module to match a string against a regular expression, glob, string,\nor function that takes the string as an argument and returns a truthy or falsy\nvalue. The matcher can also be an array of any or all of these. Useful for\nallowing a very flexible user-defined config to define things like file paths.\n\nUsage\n-----\n`npm install anymatch --save`\n\n#### anymatch (matchers, testString, [returnIndex])\n* __matchers__: (_Array_|_String_|_RegExp_|_Function_)\nString to be directly matched, string with glob patterns, regular expression\ntest, function that takes the testString as an argument and returns a truthy\nvalue if it should be matched, or an array of any number and mix of these types.\n* __testString__: (_String_) The string to test against the matchers.\n* __returnIndex__: (_Boolean_, _optional_) If true, return the array index of\nthe first matcher that that testString matched, instead of a boolean result.\n\n```js\nvar anymatch = require('anymatch');\n\nvar matchers = [\n\t'path/to/file.js',\n\t'path/anyjs/**/*.js',\n\t/foo.js$/,\n\tfunction (string) {\n\t\treturn string.indexOf('bar') !== -1 && string.length > 10\n\t}\n];\n\nanymatch(matchers, 'path/to/file.js'); // true\nanymatch(matchers, 'path/anyjs/baz.js'); // true\nanymatch(matchers, 'path/to/foo.js'); // true\nanymatch(matchers, 'path/to/bar.js'); // true\nanymatch(matchers, 'bar.js'); // false\n\n// returnIndex = true\nanymatch(matchers, 'foo.js', true); // 2\n```\n\nYou can also use the `checker` method to get a function that has already been\nbound to your matchers.\n\n```js\nvar matcher = anymatch.matcher(matchers);\n\nmatcher('path/to/file.js'); // true\nmatcher('path/anyjs/baz.js', true); // 1\n```\n\nLicense\n-------\n[MIT](https://raw.github.com/es128/anymatch/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "anymatch@0.1.1",
  "_shasum": "cdb873bd9083a424c2c4e9b6835cc40f35c2910b",
  "_from": "anymatch@~0.1.1",
  "_resolved": "https://registry.npmjs.org/anymatch/-/anymatch-0.1.1.tgz"
}
